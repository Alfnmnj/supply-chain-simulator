# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VVXUTa144701gJvGxoI6umyE2eyc_PAs
"""

# ==============================================================================
# Step 1: Setup and Data Ingestion
# ==============================================================================
# We first install any necessary packages (though for this script, Colab has them all)
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random

print("Step 1: Setup and Data Ingestion Complete.")

# --- Ingesting Data from OCR ---

# Table 1: Supplier & Component Master Data
supplier_data = {
    'Component': ['High-end CPU die', 'Mainboard chipset', 'FPGA (Stratix-class)', 'Power management IC (PMIC)'],
    'Supplier(s)': ['Intel Fab (own)', 'TSMC', 'Intel Foundry / Samsung', 'GlobalFoundries, ASE'],
    'Country': ['USA', 'Taiwan', 'USA / Korea', 'USA / Malaysia'],
    'Lead Time (Avg/Min/Max days)': ['90 / 70 / 120', '75 / 60 / 90', '112 / 80 / 140', '130 / 100 / 180'],
    'Unit Cost ($)': [150.00, 25.00, 120.00, 8.00],
    'Capacity Utilization (%)': [95, 90, 85, 92],
    'On-Time Delivery (%)': [98, 95, 93, 94]
}
df_supplier = pd.DataFrame(supplier_data)
df_supplier[['Avg_Lead_Time', 'Min_Lead_Time', 'Max_Lead_Time']] = df_supplier['Lead Time (Avg/Min/Max days)'].str.split('/', expand=True).astype(int)
df_supplier.drop(columns=['Lead Time (Avg/Min/Max days)'], inplace=True)

# Table 2: Geopolitical Risk Data
geopolitical_data = {
    'Country': ['Taiwan', 'South Korea', 'USA', 'Malaysia', 'China'],
    'Political Risk Index': [75, 80, 20, 45, 60],
    'Recent Conflict / Risk Event': [
        'Recurrent military drills, drought (2021)', 'Supply chain vulnerable to North Korea tensions',
        'Domestic policy shifts, trade disputes', 'Political instability, labor issues', 'Tightening secondary sanction regime'
    ]
}
df_geo = pd.DataFrame(geopolitical_data)

# Table 3: Logistics Data
logistics_data = {
    'Route': ['Taiwan → USA', 'South Korea → USA', 'Malaysia → USA'],
    'Lead Time (normal / disruption days)': ['21 / 35', '14 / 30', '28 / 45'],
    'Freight Cost ($/container)': [4500, 4200, 4800], 'Customs Delay (days)': [3, 2, 4]
}
df_logistics = pd.DataFrame(logistics_data)
df_logistics[['Normal_Transit_Days', 'Disrupted_Transit_Days']] = df_logistics['Lead Time (normal / disruption days)'].str.split('/', expand=True).astype(int)
df_logistics.drop(columns=['Lead Time (normal / disruption days)'], inplace=True)

# Table 4: Stockout Simulation Inputs
stockout_inputs = {
    'Criticality score (1-10)': {'CPUs': 10, 'PMICs': 6, 'FPGA': 8, 'Mainboard chipset': 9},
    'Safety stock days': {'baseline': 30, 'buffer': 60},
    'Lead time distribution': {'mean': 90, 'std': 15},
    'Forecast error (σ/μ)': {'normal': 0.20, 'volatile': 0.35}
}
print("Data successfully loaded and cleaned.\n")

# ==============================================================================
# Step 2: Define Sourcing Strategies
# ==============================================================================
print("Step 2: Defining Sourcing Strategies...")
baseline_strategy_df = df_supplier[df_supplier['Component'] == 'Mainboard chipset'].copy()
baseline_strategy_df['Strategy'] = 'Baseline (Single Source)'
baseline_strategy_df['Sourcing %'] = 100.0

resilient_strategy_df = baseline_strategy_df.copy()
resilient_strategy_df['Strategy'] = 'Resilient (Dual Source)'
resilient_strategy_df['Sourcing %'] = 60.0

new_supplier = {
    'Component': 'Mainboard chipset', 'Supplier(s)': 'Intel Fab (Ohio)', 'Country': 'USA',
    'Unit Cost ($)': 32.00, 'Capacity Utilization (%)': 85, 'On-Time Delivery (%)': 99,
    'Avg_Lead_Time': 50, 'Min_Lead_Time': 40, 'Max_Lead_Time': 65,
    'Strategy': 'Resilient (Dual Source)', 'Sourcing %': 40.0
}
resilient_strategy_df = pd.concat([resilient_strategy_df, pd.DataFrame([new_supplier])], ignore_index=True)
print("Baseline and Resilient strategies defined for 'Mainboard chipset'.\n")


# ==============================================================================
# Step 3: Build the Simulation Engine (NO CHANGES NEEDED HERE)
# ==============================================================================
print("Step 3: Building the Simulation Engine...")

def monte_carlo_stockout_simulation(
    avg_lead_time, std_dev_lead_time,
    logistics_delay_days, supply_cut_prob,
    sim_days=365, num_simulations=1000):

    avg_daily_demand = 1000
    forecast_error = stockout_inputs['Forecast error (σ/μ)']['volatile']
    std_dev_demand = avg_daily_demand * forecast_error
    safety_stock = avg_daily_demand * stockout_inputs['Safety stock days']['baseline']
    reorder_point = (avg_daily_demand * avg_lead_time) + safety_stock
    all_sim_service_levels = []

    for _ in range(num_simulations):
        inventory, stockout_days, order_placed = reorder_point, 0, False
        order_pipeline = {}
        for day in range(1, sim_days + 1):
            if day in order_pipeline:
                inventory += order_pipeline.pop(day)
                order_placed = False
            demand = max(0, np.random.normal(avg_daily_demand, std_dev_demand))
            if inventory >= demand:
                inventory -= demand
            else:
                inventory, stockout_days = 0, stockout_days + 1
            if inventory <= reorder_point and not order_placed:
                if random.random() > supply_cut_prob:
                    disrupted_lead_time = int(np.random.normal(avg_lead_time, std_dev_lead_time) + logistics_delay_days)
                    arrival_day = day + max(1, disrupted_lead_time)
                    order_pipeline[arrival_day] = reorder_point
                    order_placed = True
        all_sim_service_levels.append((sim_days - stockout_days) / sim_days)
    return np.mean(all_sim_service_levels)


def run_full_simulation(strategy_df, scenario):
    results = []
    for _, supplier in strategy_df.iterrows():
        base_cost, base_avg_lead_time = supplier['Unit Cost ($)'], supplier['Avg_Lead_Time']
        impacted_cost, logistics_delay, supply_cut = base_cost, 0, 0.0
        if supplier['Country'] == scenario['country']:
            print(f"  -> Applying '{scenario['name']}' to {supplier['Supplier(s)']} in {supplier['Country']}")
            impacted_cost *= (1 + scenario['tariff_increase'])
            logistics_delay, supply_cut = scenario['logistics_delay'], scenario['supply_cut']

        service_level = monte_carlo_stockout_simulation(
            avg_lead_time=base_avg_lead_time, std_dev_lead_time=stockout_inputs['Lead time distribution']['std'],
            logistics_delay_days=logistics_delay, supply_cut_prob=supply_cut
        )
        results.append({
            'Supplier': supplier['Supplier(s)'], 'Sourcing %': supplier['Sourcing %'],
            'Total Landed Cost ($)': impacted_cost, 'Total Lead Time (days)': base_avg_lead_time + logistics_delay,
            'Stockout Risk (%)': (1 - service_level) * 100
        })
    df_results = pd.DataFrame(results)
    return {
        'Strategy': strategy_df['Strategy'].iloc[0],
        'Weighted Avg Cost ($)': np.average(df_results['Total Landed Cost ($)'], weights=df_results['Sourcing %']),
        'Weighted Avg Lead Time (days)': np.average(df_results['Total Lead Time (days)'], weights=df_results['Sourcing %']),
        'Weighted Avg Stockout Risk (%)': np.average(df_results['Stockout Risk (%)'], weights=df_results['Sourcing %'])
    }

print("Simulation engine built.\n")

# ==============================================================================
# Step 4: Define an INTERACTIVE Disruption Scenario (The Google Colab Way)
# ==============================================================================
print("Step 4: Configure Your Interactive Disruption Scenario Below")

#@markdown ---
#@markdown ### **Scenario Inputs**
#@markdown Use the sliders and dropdowns to define the disruption. The simulation will re-run automatically.
scenario_name = "Taiwan Geopolitical Crisis" #@param {type:"string"}
country_to_disrupt = "Taiwan" #@param ["Taiwan", "South Korea", "Malaysia", "China"]
tariff_percent = 20 #@param {type:"slider", min:0, max:100, step:5}
supply_cut_percent = 50 #@param {type:"slider", min:0, max:100, step:5}
logistics_delay_days = 14 #@param {type:"slider", min:0, max:60, step:1}
#@markdown ---

# Convert percentages to decimals for calculation
interactive_scenario = {
    'name': scenario_name,
    'country': country_to_disrupt,
    'tariff_increase': tariff_percent / 100.0,
    'supply_cut': supply_cut_percent / 100.0,
    'logistics_delay': logistics_delay_days
}

print(f"Scenario defined: {interactive_scenario['name']} on {interactive_scenario['country']}\n")


# ==============================================================================
# Step 5: Run the Simulation
# ==============================================================================
print("Step 5: Running simulation for both strategies...")
print("\n--- Running for Baseline Strategy ---")
baseline_results = run_full_simulation(baseline_strategy_df, interactive_scenario)
print("\n--- Running for Resilient Strategy ---")
resilient_results = run_full_simulation(resilient_strategy_df, interactive_scenario)
final_results_df = pd.DataFrame([baseline_results, resilient_results])
print("\nSimulation complete.\n")


# ==============================================================================
# Step 6: Visualize and Analyze Results
# ==============================================================================
print("Step 6: Visualizing and Analyzing Results...")
print("\n--- Executive Summary: Scenario Impact Comparison ---")
display(final_results_df.round(2))

sns.set_style("whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(20, 6))
fig.suptitle(f'Impact of "{interactive_scenario["name"]}" Scenario on {interactive_scenario["country"]}', fontsize=16, y=1.02)

# Plot 1
sns.barplot(data=final_results_df, x='Strategy', y='Weighted Avg Cost ($)', ax=axes[0], palette='Reds_r')
axes[0].set_title('Total Landed Cost per Unit', fontsize=14); axes[0].set_ylabel('Cost ($)')
for i, r in final_results_df.iterrows():
    axes[0].text(i, r['Weighted Avg Cost ($)'], f"${r['Weighted Avg Cost ($)']:.2f}", color='black', ha="center", va='bottom')

# Plot 2
sns.barplot(data=final_results_df, x='Strategy', y='Weighted Avg Lead Time (days)', ax=axes[1], palette='Blues_r')
axes[1].set_title('Weighted Average Lead Time', fontsize=14); axes[1].set_ylabel('Lead Time (days)')
for i, r in final_results_df.iterrows():
    axes[1].text(i, r['Weighted Avg Lead Time (days)'], f"{r['Weighted Avg Lead Time (days)']:.1f} days", color='black', ha="center", va='bottom')

# Plot 3
sns.barplot(data=final_results_df, x='Strategy', y='Weighted Avg Stockout Risk (%)', ax=axes[2], palette='Greens_r')
axes[2].set_title('Probability of Stockout', fontsize=14); axes[2].set_ylabel('Stockout Risk (%)')
axes[2].set_ylim(0, max(final_results_df['Weighted Avg Stockout Risk (%)']) * 1.25)
for i, r in final_results_df.iterrows():
    axes[2].text(i, r['Weighted Avg Stockout Risk (%)'], f"{r['Weighted Avg Stockout Risk (%)']:.2f}%", color='black', ha="center", va='bottom')

plt.tight_layout(rect=[0, 0, 1, 0.96]); plt.show()


# ==============================================================================
# Step 7: Generate Actionable Recommendations
# ==============================================================================
print("\n" + "="*78); print("Step 7: Actionable Recommendations & Executive Summary"); print("="*78)
print(f"Scenario Analyzed: {interactive_scenario['name']} targeting {interactive_scenario['country']}")
print("-" * 78)

baseline_cost = final_results_df.loc[0, 'Weighted Avg Cost ($)']
resilient_cost = final_results_df.loc[1, 'Weighted Avg Cost ($)']
baseline_risk = final_results_df.loc[0, 'Weighted Avg Stockout Risk (%)']
resilient_risk = final_results_df.loc[1, 'Weighted Avg Stockout Risk (%)']
cost_increase = ((resilient_cost - baseline_cost) / baseline_cost) * 100
risk_reduction = baseline_risk - resilient_risk

print("### Key Findings:\n")
print(f"1.  **Baseline Strategy (Single Source):** Highly vulnerable. Simulation shows a stockout probability of **{baseline_risk:.2f}%**, with a landed cost of **${baseline_cost:.2f}**.")
print(f"\n2.  **Resilient Strategy (Dual Source):** By diversifying, the stockout probability is reduced to **{resilient_risk:.2f}%**.")
print(f"\n3.  **Cost vs. Resilience Trade-off:** Resilience comes at a premium. The weighted average cost is **${resilient_cost:.2f}**, which is **{cost_increase:.2f}% higher** than the disrupted baseline cost.")
print("\n### Actionable Recommendations:\n")
print("1.  **Initiate Dual-Sourcing Qualification:** The simulation proves this drastically reduces stockout risk.")
print(f"\n2.  **Quantify ROI:** Paying a {cost_increase:.2f}% cost premium prevents a potential stockout event. The cost of a line-down situation far outweighs this premium.")
print("\n3.  **Update and Monitor:** Use this interactive tool to explore other risks (e.g., in Korea or Malaysia) to build a comprehensive resilience playbook.")

